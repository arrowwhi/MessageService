// Code generated by github.com/jmattheis/goverter, DO NOT EDIT.
//go:build !goverter

package converter

import (
	service "MessageService/internal/interfaces/service"
	v1 "MessageService/proto/message_service/chats/v1"
	v11 "MessageService/proto/message_service/message/v1"
	v12 "MessageService/proto/message_service/users/v1"
)

type RepoConverterImpl struct{}
type ServiceConverterImpl struct{}

func (c *ServiceConverterImpl) AddChatToService(source *v1.AddChatRequest) *service.AddChatRequest {
	var pServiceAddChatRequest *service.AddChatRequest
	if source != nil {
		var serviceAddChatRequest service.AddChatRequest
		serviceAddChatRequest.Chat = c.pChatsv1ChatToServiceChat((*source).Chat)
		pServiceAddChatRequest = &serviceAddChatRequest
	}
	return pServiceAddChatRequest
}
func (c *ServiceConverterImpl) GetChatsToHandler(source *service.GetChatsResponse) *v1.GetChatsResponse {
	var pChatsv1GetChatsResponse *v1.GetChatsResponse
	if source != nil {
		var chatsv1GetChatsResponse v1.GetChatsResponse
		var pChatsv1ChatList []*v1.Chat
		if (*source).Chats != nil {
			pChatsv1ChatList = make([]*v1.Chat, len((*source).Chats))
			for i := 0; i < len((*source).Chats); i++ {
				pChatsv1ChatList[i] = c.serviceChatToPChatsv1Chat((*source).Chats[i])
			}
		}
		chatsv1GetChatsResponse.Chats = pChatsv1ChatList
		pChatsv1GetChatsResponse = &chatsv1GetChatsResponse
	}
	return pChatsv1GetChatsResponse
}
func (c *ServiceConverterImpl) GetChatsToService(source *v1.GetChatsRequest) *service.GetChatsRequest {
	var pServiceGetChatsRequest *service.GetChatsRequest
	if source != nil {
		var serviceGetChatsRequest service.GetChatsRequest
		serviceGetChatsRequest.Limit = (*source).Limit
		serviceGetChatsRequest.Offset = (*source).Offset
		pServiceGetChatsRequest = &serviceGetChatsRequest
	}
	return pServiceGetChatsRequest
}
func (c *ServiceConverterImpl) GetMessagesToHandler(source *service.GetMessagesResponse) *v11.GetMessagesResponse {
	var pMessagev1GetMessagesResponse *v11.GetMessagesResponse
	if source != nil {
		var messagev1GetMessagesResponse v11.GetMessagesResponse
		var pMessagev1ChatMessageList []*v11.ChatMessage
		if (*source).Messages != nil {
			pMessagev1ChatMessageList = make([]*v11.ChatMessage, len((*source).Messages))
			for i := 0; i < len((*source).Messages); i++ {
				pMessagev1ChatMessageList[i] = c.serviceMessageToPMessagev1ChatMessage((*source).Messages[i])
			}
		}
		messagev1GetMessagesResponse.Messages = pMessagev1ChatMessageList
		pMessagev1GetMessagesResponse = &messagev1GetMessagesResponse
	}
	return pMessagev1GetMessagesResponse
}
func (c *ServiceConverterImpl) GetMessagesToService(source *v11.GetMessagesRequest) *service.GetMessagesRequest {
	var pServiceGetMessagesRequest *service.GetMessagesRequest
	if source != nil {
		var serviceGetMessagesRequest service.GetMessagesRequest
		serviceGetMessagesRequest.ChatId = (*source).ChatId
		serviceGetMessagesRequest.Limit = (*source).Limit
		serviceGetMessagesRequest.Offset = (*source).Offset
		pServiceGetMessagesRequest = &serviceGetMessagesRequest
	}
	return pServiceGetMessagesRequest
}
func (c *ServiceConverterImpl) GetStatusInfoToHandler(source *service.GetStatusInfoResponse) *v12.GetStatusInfoResponse {
	var pUsersv1GetStatusInfoResponse *v12.GetStatusInfoResponse
	if source != nil {
		var usersv1GetStatusInfoResponse v12.GetStatusInfoResponse
		var pUsersv1UserList []*v12.User
		if (*source).Users != nil {
			pUsersv1UserList = make([]*v12.User, len((*source).Users))
			for i := 0; i < len((*source).Users); i++ {
				pUsersv1UserList[i] = c.pServiceUserToPUsersv1User((*source).Users[i])
			}
		}
		usersv1GetStatusInfoResponse.Users = pUsersv1UserList
		pUsersv1GetStatusInfoResponse = &usersv1GetStatusInfoResponse
	}
	return pUsersv1GetStatusInfoResponse
}
func (c *ServiceConverterImpl) GetStatusInfoToService(source *v12.GetStatusInfoRequest) *service.GetStatusInfoRequest {
	var pServiceGetStatusInfoRequest *service.GetStatusInfoRequest
	if source != nil {
		var serviceGetStatusInfoRequest service.GetStatusInfoRequest
		var int64List []int64
		if (*source).Ids != nil {
			int64List = make([]int64, len((*source).Ids))
			for i := 0; i < len((*source).Ids); i++ {
				int64List[i] = (*source).Ids[i]
			}
		}
		serviceGetStatusInfoRequest.Ids = int64List
		pServiceGetStatusInfoRequest = &serviceGetStatusInfoRequest
	}
	return pServiceGetStatusInfoRequest
}
func (c *ServiceConverterImpl) SendMessageToService(source *v11.SendMessageRequest) *service.SendMessageRequest {
	var pServiceSendMessageRequest *service.SendMessageRequest
	if source != nil {
		var serviceSendMessageRequest service.SendMessageRequest
		serviceSendMessageRequest.Message = c.pMessagev1ChatMessageToServiceMessage((*source).Message)
		pServiceSendMessageRequest = &serviceSendMessageRequest
	}
	return pServiceSendMessageRequest
}
func (c *ServiceConverterImpl) UpdateMessageStatusToService(source *v11.UpdateMessageStatusRequest) *service.UpdateMessageStatusRequest {
	var pServiceUpdateMessageStatusRequest *service.UpdateMessageStatusRequest
	if source != nil {
		var serviceUpdateMessageStatusRequest service.UpdateMessageStatusRequest
		serviceUpdateMessageStatusRequest.MessageId = (*source).MessageId
		pServiceUpdateMessageStatusRequest = &serviceUpdateMessageStatusRequest
	}
	return pServiceUpdateMessageStatusRequest
}
func (c *ServiceConverterImpl) UpdateStatusToService(source *v12.UpdateStatusRequest) *service.UpdateStatusRequest {
	var pServiceUpdateStatusRequest *service.UpdateStatusRequest
	if source != nil {
		var serviceUpdateStatusRequest service.UpdateStatusRequest
		serviceUpdateStatusRequest.UserId = (*source).UserId
		serviceUpdateStatusRequest.Online = (*source).Online
		pServiceUpdateStatusRequest = &serviceUpdateStatusRequest
	}
	return pServiceUpdateStatusRequest
}
func (c *ServiceConverterImpl) pChatsv1ChatToServiceChat(source *v1.Chat) service.Chat {
	var serviceChat service.Chat
	if source != nil {
		var serviceChat2 service.Chat
		serviceChat2.Id = (*source).Id
		serviceChat2.Name = (*source).Name
		var int64List []int64
		if (*source).Users != nil {
			int64List = make([]int64, len((*source).Users))
			for i := 0; i < len((*source).Users); i++ {
				int64List[i] = (*source).Users[i]
			}
		}
		serviceChat2.Users = int64List
		serviceChat = serviceChat2
	}
	return serviceChat
}
func (c *ServiceConverterImpl) pMessagev1ChatMessageToServiceMessage(source *v11.ChatMessage) service.Message {
	var serviceMessage service.Message
	if source != nil {
		var serviceMessage2 service.Message
		serviceMessage2.MessageId = (*source).MessageId
		serviceMessage2.SenderId = (*source).SenderId
		serviceMessage2.RecipientId = (*source).RecipientId
		serviceMessage2.Text = (*source).Text
		var serviceImageList []service.Image
		if (*source).Images != nil {
			serviceImageList = make([]service.Image, len((*source).Images))
			for i := 0; i < len((*source).Images); i++ {
				serviceImageList[i] = c.pMessagev1ChatMessage_ImageToServiceImage((*source).Images[i])
			}
		}
		serviceMessage2.Images = serviceImageList
		serviceMessage2.Timestamp = (*source).Timestamp
		serviceMessage = serviceMessage2
	}
	return serviceMessage
}
func (c *ServiceConverterImpl) pMessagev1ChatMessage_ImageToServiceImage(source *v11.ChatMessage_Image) service.Image {
	var serviceImage service.Image
	if source != nil {
		var serviceImage2 service.Image
		serviceImage2.ImageId = (*source).ImageId
		var byteList []uint8
		if (*source).Data != nil {
			byteList = make([]uint8, len((*source).Data))
			for i := 0; i < len((*source).Data); i++ {
				byteList[i] = (*source).Data[i]
			}
		}
		serviceImage2.Data = byteList
		serviceImage = serviceImage2
	}
	return serviceImage
}
func (c *ServiceConverterImpl) pServiceUserToPUsersv1User(source *service.User) *v12.User {
	var pUsersv1User *v12.User
	if source != nil {
		var usersv1User v12.User
		usersv1User.UserId = (*source).UserId
		usersv1User.Username = (*source).Username
		usersv1User.Status = c.serviceStatusToPUsersv1Status((*source).Status)
		pUsersv1User = &usersv1User
	}
	return pUsersv1User
}
func (c *ServiceConverterImpl) serviceChatToPChatsv1Chat(source service.Chat) *v1.Chat {
	var chatsv1Chat v1.Chat
	chatsv1Chat.Id = source.Id
	chatsv1Chat.Name = source.Name
	var int64List []int64
	if source.Users != nil {
		int64List = make([]int64, len(source.Users))
		for i := 0; i < len(source.Users); i++ {
			int64List[i] = source.Users[i]
		}
	}
	chatsv1Chat.Users = int64List
	return &chatsv1Chat
}
func (c *ServiceConverterImpl) serviceImageToPMessagev1ChatMessage_Image(source service.Image) *v11.ChatMessage_Image {
	var messagev1ChatMessage_Image v11.ChatMessage_Image
	messagev1ChatMessage_Image.ImageId = source.ImageId
	var byteList []uint8
	if source.Data != nil {
		byteList = make([]uint8, len(source.Data))
		for i := 0; i < len(source.Data); i++ {
			byteList[i] = source.Data[i]
		}
	}
	messagev1ChatMessage_Image.Data = byteList
	return &messagev1ChatMessage_Image
}
func (c *ServiceConverterImpl) serviceMessageToPMessagev1ChatMessage(source service.Message) *v11.ChatMessage {
	var messagev1ChatMessage v11.ChatMessage
	messagev1ChatMessage.MessageId = source.MessageId
	messagev1ChatMessage.SenderId = source.SenderId
	messagev1ChatMessage.RecipientId = source.RecipientId
	messagev1ChatMessage.Text = source.Text
	var pMessagev1ChatMessage_ImageList []*v11.ChatMessage_Image
	if source.Images != nil {
		pMessagev1ChatMessage_ImageList = make([]*v11.ChatMessage_Image, len(source.Images))
		for i := 0; i < len(source.Images); i++ {
			pMessagev1ChatMessage_ImageList[i] = c.serviceImageToPMessagev1ChatMessage_Image(source.Images[i])
		}
	}
	messagev1ChatMessage.Images = pMessagev1ChatMessage_ImageList
	messagev1ChatMessage.Timestamp = source.Timestamp
	return &messagev1ChatMessage
}
func (c *ServiceConverterImpl) serviceStatusToPUsersv1Status(source service.Status) *v12.Status {
	var usersv1Status v12.Status
	usersv1Status.IsOnline = source.IsOnline
	usersv1Status.LastActiveTime = source.LastActiveTime
	return &usersv1Status
}
